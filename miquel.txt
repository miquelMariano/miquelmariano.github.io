ZoL8i3YNdzJc*VwwFe3T

# Variables globales
$global:isConnected = $false
$global:connectionStatus = "[‚úñ No conectado]"

function Get-CredentialsAndIP {
    $global:pcIP = Read-Host "Introduce la IP o FQDN de Prism Central"
    $global:username = Read-Host "Introduce el usuario"
    $global:securePassword = Read-Host "Introduce la contrase√±a" -AsSecureString
    $global:plainPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
        [Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePassword)
    )
    $global:baseUrl = "https://$pcIP:9440/api/nutanix/v3"

    $authInfo = ("{0}:{1}" -f $username, $plainPassword)
    $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($authInfo))

    $global:headers = @{
        "Accept"        = "application/json"
        "Content-Type"  = "application/json"
        "Authorization" = "Basic $encodedAuth"
    }

    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}

    Write-Host "üß™ Probando conexi√≥n a Prism Central: $baseUrl/cluster" -ForegroundColor Cyan
    Write-Host "üõÇ Usuario: $username"
    Write-Host "üîê Headers: $($headers | Out-String)"

    try {
        $url = "$baseUrl/cluster"
        $response = Invoke-RestMethod -Method Get -Uri $url -Headers $headers -TimeoutSec 10 -Verbose
        $global:isConnected = $true
        $global:connectionStatus = "[‚úî Conectado a $pcIP]"
        Write-Host "‚úÖ Conexi√≥n exitosa a Prism Central." -ForegroundColor Green
    } catch {
        $global:isConnected = $false
        $global:connectionStatus = "[‚úñ Error de conexi√≥n]"

        Write-Host "‚ùå Error de conexi√≥n con Prism Central" -ForegroundColor Red
        Write-Host "üßæ Detalle del error:" -ForegroundColor Yellow
        Write-Host $_.Exception.Message -ForegroundColor Red

        if ($_.ErrorDetails) {
            Write-Host "üìã Cuerpo del error recibido:" -ForegroundColor DarkYellow
            Write-Host $_.ErrorDetails.Message
        }

        Write-Host "`nüìå Verifica lo siguiente:"
        Write-Host "- Que el puerto 9440 est√© accesible desde este equipo"
        Write-Host "- Que la IP o FQDN est√© correcta: $pcIP"
        Write-Host "- Que las credenciales sean v√°lidas para Prism Central"
        Write-Host "- Que el API v3 est√© disponible en ese endpoint"
    }
}

function List-Categories {
    $url = "$baseUrl/categories/list"
    $body = "{}"
    Invoke-RestMethod -Method Post -Uri $url -Headers $headers -Body $body
}

function Create-Category {
    $categoryName = Read-Host "Introduce el nombre de la nueva categor√≠a"
    $valuesInput = Read-Host "Introduce los valores separados por coma (ej: Prod,Dev)"
    $categoryValues = $valuesInput -split ',' | ForEach-Object { $_.Trim() }

    $url = "$baseUrl/categories"
    $body = @{
        name = $categoryName
        value_list = $categoryValues
    } | ConvertTo-Json -Depth 3

    Invoke-RestMethod -Method Post -Uri $url -Headers $headers -Body $body
}

function Assign-CategoryToVM {
    $vmUUID = Read-Host "Introduce el UUID de la VM"
    $categoryName = Read-Host "Introduce el nombre de la categor√≠a"
    $categoryValue = Read-Host "Introduce el valor a asignar"

    $url = "$baseUrl/vms/$vmUUID"
    $vm = Invoke-RestMethod -Method Get -Uri $url -Headers $headers

    if (-not $vm.metadata.categories) {
        $vm.metadata.categories = @{}
    }
    $vm.metadata.categories.$categoryName = $categoryValue

    $jsonBody = $vm | ConvertTo-Json -Depth 10
    Invoke-RestMethod -Method Put -Uri $url -Headers $headers -Body $jsonBody
}

function Show-Menu {
    Clear-Host
    Write-Host "=== Nutanix Prism Central - Gesti√≥n de Categor√≠as === $connectionStatus" -ForegroundColor Cyan
    Write-Host "1. Introducir credenciales e IP"
    Write-Host "2. Listar categor√≠as"
    Write-Host "3. Crear una nueva categor√≠a"
    Write-Host "4. Asignar categor√≠a a una VM"
    Write-Host "5. Salir"
}

do {
    Show-Menu
    $option = Read-Host "Selecciona una opci√≥n (1-5)"
    switch ($option) {
        "1" { Get-CredentialsAndIP }
        "2" {
            if ($isConnected) {
                List-Categories | ConvertTo-Json -Depth 5 | Write-Output
            } else {
                Write-Host "‚ùå No est√°s conectado. Usa la opci√≥n 1 primero." -ForegroundColor Yellow
            }
            Pause
        }
        "3" {
            if ($isConnected) {
                Create-Category | ConvertTo-Json -Depth 5 | Write-Output
            } else {
                Write-Host "‚ùå No est√°s conectado. Usa la opci√≥n 1 primero." -ForegroundColor Yellow
            }
            Pause
        }
        "4" {
            if ($isConnected) {
                Assign-CategoryToVM | ConvertTo-Json -Depth 5 | Write-Output
            } else {
                Write-Host "‚ùå No est√°s conectado. Usa la opci√≥n 1 primero." -ForegroundColor Yellow
            }
            Pause
        }
        "5" {
            Write-Host "üëã Saliendo..." -ForegroundColor Cyan
        }
        default {
            Write-Host "‚ùó Opci√≥n no v√°lida. Intenta de nuevo." -ForegroundColor Red
            Pause
        }
    }
} while ($option -ne "5")
